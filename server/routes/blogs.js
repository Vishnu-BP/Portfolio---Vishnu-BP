const express = require('express');
const Blog = require('../models/Blog');
const { protect } = require('../middleware/auth');

const router = express.Router();

// @route GET /api/blogs
// @desc Fetch all blogs (Public Access)
// @access Public
router.get('/', async (req, res) => {
  try {
    const blogs = await Blog.find({}).sort({ date: -1 });
    res.json(blogs);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching blogs' });
  }
});

// @route GET /api/blogs/:slug
// @desc Fetch single blog by slug (Public Access)
// @access Public
router.get('/:slug', async (req, res) => {
  try {
    const blog = await Blog.findOne({ slug: req.params.slug });
    if (blog) {
        res.json(blog);
    } else {
        res.status(404).json({ message: 'Blog post not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching blog post' });
  }
});

// @route POST /api/blogs
// @desc Add a new blog post (Protected Access)
// @access Private (Admin)
router.post('/', protect, async (req, res) => {
  const { title, summary, content, tags } = req.body;
  
  try {
    // Slug will be generated by the model pre-save hook
    const newBlog = await Blog.create({ title, summary, content, tags });
    res.status(201).json(newBlog);
  } catch (error) {
    res.status(400).json({ message: 'Invalid blog data or title already exists' });
  }
});

// @route DELETE /api/blogs/:id
// @desc Delete a blog post (Protected Access)
// @access Private (Admin)
router.delete('/:id', protect, async (req, res) => {
    try {
        const result = await Blog.deleteOne({ _id: req.params.id });

        if (result.deletedCount === 0) {
            return res.status(404).json({ message: 'Blog post not found' });
        }
        res.json({ message: 'Blog post removed successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Error deleting blog post' });
    }
});

module.exports = router;
